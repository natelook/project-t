// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  tournaments      Tournament[]
  // registrations    Player[]
  TeamOnTournament TeamOnTournament[]
  teams            Team[]             @relation("Players")
  owned_teams      Team[]             @relation("Owned")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tournament {
  id            String             @id @unique @default(cuid())
  name          String
  created_by_id String
  created_by    User               @relation(fields: [created_by_id], references: [id], onDelete: Cascade)
  start_date    DateTime
  created_at    DateTime           @default(now())
  registrants   TeamOnTournament[]
  format        String
}

model Team {
  id            String             @id @unique @default(cuid())
  name          String
  owner_user_id String
  owner         User               @relation(fields: [owner_user_id], references: [id], name: "Owned")
  players       User[]             @relation("Players")
  tournaments   TeamOnTournament[]
}

model TeamOnTournament {
  tournament_id String
  tournament    Tournament @relation(fields: [tournament_id], references: [id])
  team_id       String
  team          Team       @relation(fields: [team_id], references: [id])
  registered_by User       @relation(fields: [user_id], references: [id])
  registered_at DateTime   @default(now())

  user_id String
  @@id([tournament_id, team_id])
}

// model Player {
//   id      String   @id
//   user_id String
//   team_id String
//   active  Boolean?
//   coach   Boolean?
//   team    Team     @relation(fields: [team_id], references: [id])
//   user    User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
// }
