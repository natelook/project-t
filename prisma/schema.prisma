// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String           @id @default(cuid())
  username         String           @unique @default(cuid())
  pfp              String?
  name             String?
  email            String?          @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  tournaments      Tournament[]
  teamOnTournament Registrant[]
  teams            Team[]           @relation("Players")
  ownedTeams       Team[]           @relation("Owned")
  teamInvitations  TeamInvitation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tournament {
  id          String       @id @unique @default(cuid())
  name        String
  slug        String       @unique @default(uuid())
  createdBy   String
  game        String
  creator     User         @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  startDate   DateTime
  createdAt   DateTime     @default(now())
  registrants Registrant[]
  format      String
  matches     Match[]
}

model Match {
  matchId      Int
  nextMatch    Int
  teamOneId    String?
  teamTwoId    String?
  teamOneScore Int @default(0)
  teamTwoScore Int @default(0)
  winningScore Int @default(1)
  winner String?
  teamOne      Team?      @relation("TeamOne", fields: [teamOneId], references: [id])
  teamTwo      Team?      @relation("TeamTwo", fields: [teamTwoId], references: [id])
  tournamentId String
  round        Int
  tournament   Tournament @relation(fields: [tournamentId], references: [id])

  @@id([tournamentId, matchId])
}

model Team {
  id             String           @id @unique @default(cuid())
  name           String
  ownerUserId    String
  owner          User             @relation(fields: [ownerUserId], references: [id], name: "Owned")
  players        User[]           @relation("Players")
  tournaments    Registrant[]
  // matches     TeamMatch[]
  invitations    TeamInvitation[]
  teamOneMatches Match[]          @relation("TeamOne")
  teamTwoMatches Match[]          @relation("TeamTwo")
}

model Registrant {
  tournamentId String
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  teamId       String
  team         Team       @relation(fields: [teamId], references: [id])
  registeredBy User       @relation(fields: [userId], references: [id])
  registeredAt DateTime   @default(now())
  players      String[]
  userId       String

  @@id([tournamentId, teamId])
}

model TeamInvitation {
  id              String @id @unique @default(cuid())
  teamId          String
  team            Team   @relation(fields: [teamId], references: [id])
  invitedPlayerId String
  invitedPlayer   User   @relation(fields: [invitedPlayerId], references: [id])
  status          String @default("Pending")
}

model Notification {
  id      String @id @unique @default(cuid())
  message String
  link    String
}
